// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/divyajaisawal/go/src/source.golabs.io/gopay_apps/kafka_example_golang_client/proto/greet.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	proto "kafka_example_golang_client/proto"
)

// MockGreetingServiceClient is a mock of GreetingServiceClient interface
type MockGreetingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGreetingServiceClientMockRecorder
}

// MockGreetingServiceClientMockRecorder is the mock recorder for MockGreetingServiceClient
type MockGreetingServiceClientMockRecorder struct {
	mock *MockGreetingServiceClient
}

// NewMockGreetingServiceClient creates a new mock instance
func NewMockGreetingServiceClient(ctrl *gomock.Controller) *MockGreetingServiceClient {
	mock := &MockGreetingServiceClient{ctrl: ctrl}
	mock.recorder = &MockGreetingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreetingServiceClient) EXPECT() *MockGreetingServiceClientMockRecorder {
	return m.recorder
}

// Greeting mocks base method
func (m *MockGreetingServiceClient) Greeting(ctx context.Context, in *proto.HelloRequest, opts ...grpc.CallOption) (*proto.HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Greeting", varargs...)
	ret0, _ := ret[0].(*proto.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greeting indicates an expected call of Greeting
func (mr *MockGreetingServiceClientMockRecorder) Greeting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greeting", reflect.TypeOf((*MockGreetingServiceClient)(nil).Greeting), varargs...)
}

// MockGreetingServiceServer is a mock of GreetingServiceServer interface
type MockGreetingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGreetingServiceServerMockRecorder
}

// MockGreetingServiceServerMockRecorder is the mock recorder for MockGreetingServiceServer
type MockGreetingServiceServerMockRecorder struct {
	mock *MockGreetingServiceServer
}

// NewMockGreetingServiceServer creates a new mock instance
func NewMockGreetingServiceServer(ctrl *gomock.Controller) *MockGreetingServiceServer {
	mock := &MockGreetingServiceServer{ctrl: ctrl}
	mock.recorder = &MockGreetingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreetingServiceServer) EXPECT() *MockGreetingServiceServerMockRecorder {
	return m.recorder
}

// Greeting mocks base method
func (m *MockGreetingServiceServer) Greeting(arg0 context.Context, arg1 *proto.HelloRequest) (*proto.HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greeting", arg0, arg1)
	ret0, _ := ret[0].(*proto.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greeting indicates an expected call of Greeting
func (mr *MockGreetingServiceServerMockRecorder) Greeting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greeting", reflect.TypeOf((*MockGreetingServiceServer)(nil).Greeting), arg0, arg1)
}
